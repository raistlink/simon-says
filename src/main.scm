(define magictopleft #f)
(define magictopright #f)
(define magicbottomleft #f)
(define magicbottomright #f)
(define computer '())
(define computeraux '())
(define computeraux2 '())
(define playerinput '())
(define numberstate #t)
(define statecounter 0)
(define round 1)
(define failure #f)
(define success #f)
(define points 0)
(define started #t)


(define (my-log text)
  (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION text))

(define (fill-random nlist)
  (let loop ((rest nlist))
    (if (null? rest)
        (cons (random-integer 4) '())
        (cons (car rest)
              (loop (cdr rest))))))

(define (counter p)
  (let loop ((counter 0))
    (if (eq? counter p)
        #t
        (loop (+ counter 1)))))

(define (main)
  ((fusion:create-simple-gl-cairo '(width: 1280 height: 752))
   (let ((posx 80.0))
     (lambda (cr)
       ;;(SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (object->string (SDL_GL_Extension_Supported "GL_EXT_texture_format_BGRA8888")))
       (let ((test-func (lambda () (my-log "test func!!!!!")))
             (paint-rectangles
              (lambda (rectangle value)
                (if (eq? rectangle topleft)
                    (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
                    (cairo_set_source_rgba cr 0.5 0.0 0.0 1.0)))))
         (if started
             (begin 
               (if numberstate 
                   (begin (if (counter 2000000)
                              (set! computer (fill-random computer)))
                          (if (= (car computer) 0)
                              (set! magictopleft #t)
                              (set! magictopleft #f))
                          (if (= (car computer) 1)
                              (set! magictopright #t)
                              (set! magictopright #f))
                          (if (= (car computer) 2)
                              (set! magicbottomleft #t)
                              (set! magicbottomleft #f))
                          (if (= (car computer) 3)
                              (set! magicbottomright #t)
                              (set! magicbottomright #f))
                          (set! computeraux (append computeraux (cons (car computer) '())))
                          (set! computer (cdr computer))
                          (pp computeraux)
                          (set! success #f)
                          (set! statecounter (+ statecounter 1))))
               (if (> statecounter round)
                   (begin (set! numberstate #f)
                          (set! statecounter 0)
                          (set! magictopleft #f)
                          (set! magictopright #f)
                          (set! magicbottomleft #f)
                          (set! magicbottomright #f)))
               (if (= (length playerinput) round)
                   (begin 
                     (if (every = playerinput computeraux)
                         (begin (set! success #t)
                                (set! points (+ points 50))
                                (set! playerinput '())
                                (set! computer computeraux)
                                (set! computeraux '())
                                (set! numberstate #t)
                                (set! round (+ round 1)))
                         (set! failure #t))))
                   
               (if magictopleft  
                   (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
                   (cairo_set_source_rgba cr 0.5 0.0 0.0 1.0))
               (cairo_rectangle cr 0.0 0.0 640.0 376.0)
               (cairo_fill cr)
               (if magictopright
                   (cairo_set_source_rgba cr 0.0 1.0 0.0 1.0)
                   (cairo_set_source_rgba cr 0.0 0.5 0.0 1.0))
               (cairo_rectangle cr 640.0 0.0 1280.0 376.0)
               (cairo_fill cr)
               (if magicbottomleft
                   (cairo_set_source_rgba cr 0.0 0.0 1.0 1.0)
                   (cairo_set_source_rgba cr 0.0 0.0 0.5 1.0))
               (cairo_rectangle cr 0.0 376.0 640.0 752.0)
               (cairo_fill cr)
               (if magicbottomright
                   (cairo_set_source_rgba cr 1.0 1.0 0.0 1.0)
                   (cairo_set_source_rgba cr 0.5 0.5 0.0 1.0))
               (cairo_rectangle cr 640.0 376.0 1280.0 752.0)
               (cairo_fill cr)
               ;; (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               ;; (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               ;; (cairo_set_font_size cr 16.0)
               ;; (cairo_move_to cr 40.0 40.0)
               ;; (cairo_show_text cr "Eufrasio Says")
               ;; (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1115.0 40.0)
               (cairo_show_text cr "POINTS: ")
               (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1200.0 40.0)
               (cairo_show_text cr (number->string points))
               (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1115.0 60.0)
               (cairo_show_text cr "Ronda")
               (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1200.0 60.0)
               (cairo_show_text cr (number->string (- round 3)))
               (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1115.0 80.0)
               (cairo_show_text cr "Colores")
               (cairo_fill cr)
               (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
               (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
               (cairo_set_font_size cr 16.0)
               (cairo_move_to cr 1200.0 80.0)
               (cairo_show_text cr (number->string round))
               (cairo_fill cr)
               (if (eq? success #t)
                   (begin
                     (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
                     (cairo_set_source_rgba cr 1.0 0.0 1.0 0.8)
                     (cairo_set_font_size cr 80.0)
                     (cairo_move_to cr 450.0 375.0)
                     (cairo_show_text cr "SUCCESS")
                     (cairo_fill cr)))
               (if failure
                   (begin
                     'exit)
                   (void))))
         )))
   (lambda (event)
     (let ((type (SDL_Event-type event)))
       (cond
        ((= type SDL_KEYDOWN)
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym (SDL_KeyboardEvent-keysym kevt))))
           (cond ((= key SDLK_ESCAPE)
                  'exit)
                 ((= key SDLK_q)
                  (set! magictopleft #t)
                  ;;(paint-rectangles (topleft #t))
                  )
                 ((= key SDLK_w)
                  (set! magictopright #t))
                 ((= key SDLK_a)
                  (set! magicbottomleft #t))
                 ((= key SDLK_s)
                  (set! magicbottomright #t))
                 (else
                  (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (string-append "Key: " (number->string key)))))))
        ((= type SDL_KEYUP)
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym (SDL_KeyboardEvent-keysym kevt))))
           (cond ((= key SDLK_q)
                  (begin (set! magictopleft #f)
                         (set! playerinput (append playerinput '(0)))
                         (pp playerinput)))
                 ((= key SDLK_w)
                  (begin (set! magictopright #f)
                         (set! playerinput (append playerinput '(1)))
                         (pp playerinput)))
                 ((= key SDLK_a)
                  (begin (set! magicbottomleft #f)
                         (set! playerinput (append playerinput '(2)))
                         (pp playerinput)))
                 ((= key SDLK_s)
                  (begin (set! magicbottomright #f)
                         (set! playerinput (append playerinput '(3)))
                         (pp playerinput))))))
        ((= type SDL_MOUSEBUTTONDOWN)
         ;;(SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION SDL_Cursor)
         )
        ((= type SDL_FINGERDOWN)
         (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION "Finger down!"))
        ((= type SDL_WINDOWEVENT)
         'handle-window-events)
        ((= type SDL_QUIT)
         'exit))))))

