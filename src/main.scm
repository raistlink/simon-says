(define magictopleft #f)
(define magictopright #f)
(define magicbottomleft #f)
(define magicbottomright #f)
(define computer '())
(define computeraux '())

(define (my-log text)
  (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION text))
(define (fill-random nlist)
  (let loop ((rest nlist))
    (if (null? rest)
        (cons (random-integer 4) '())
        (cons (car rest)
              (loop (cdr rest))))))
(define (counter p)
  (let loop ((counter 0))
    (if (eq? counter p)
        #t
        (loop (+ counter 1)))))
(define (main)
  ((fusion:create-simple-gl-cairo '(width: 1280 height: 752))
   (let ((posx 80.0))
     (lambda (cr)
       ;;(SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (object->string (SDL_GL_Extension_Supported "GL_EXT_texture_format_BGRA8888")))
       (let ((test-func (lambda () (my-log "test func!!!!!")))
             (paint-rectangles
              (lambda (rectangle value)
                (if (eq? rectangle topleft)
                    (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
                    (cairo_set_source_rgba cr 0.5 0.0 0.0 1.0)))))
         (if (counter 1000000)
             (set! computer (fill-random computer)))
         (if (= (car computer) 0)
             (set! magictopleft #t)
             (set! magictopleft #f))
         (if (= (car computer) 1)
             (set! magictopright #t)
             (set! magictopright #f))
         (if (= (car computer) 2)
             (set! magicbottomleft #t)
             (set! magicbottomleft #f))
         (if (= (car computer) 3)
             (set! magicbottomright #t)
             (set! magicbottomright #f))
         (set! computeraux (cons (car computer) computeraux))
         (set! computer (cdr computer))
         (pp computeraux)
         (if magictopleft  
             (cairo_set_source_rgba cr 1.0 0.0 0.0 1.0)
             (cairo_set_source_rgba cr 0.5 0.0 0.0 1.0))
         (cairo_rectangle cr 0.0 0.0 640.0 376.0)
         (cairo_fill cr)
         (if magictopright
             (cairo_set_source_rgba cr 0.0 1.0 0.0 1.0)
             (cairo_set_source_rgba cr 0.0 0.5 0.0 1.0))
         (cairo_rectangle cr 640.0 0.0 1280.0 376.0)
         (cairo_fill cr)
         (if magicbottomleft
             (cairo_set_source_rgba cr 0.0 0.0 1.0 1.0)
             (cairo_set_source_rgba cr 0.0 0.0 0.5 1.0))
         (cairo_rectangle cr 0.0 376.0 640.0 752.0)
         (cairo_fill cr)
         (if magicbottomright
             (cairo_set_source_rgba cr 1.0 1.0 0.0 1.0)
             (cairo_set_source_rgba cr 0.5 0.5 0.0 1.0))
         (cairo_rectangle cr 640.0 376.0 1280.0 752.0)
         (cairo_fill cr)
         (cairo_select_font_face cr "Sans" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
         (cairo_set_source_rgba cr 0.0 0.0 0.0 0.8)
         (cairo_set_font_size cr 16.0)
         (cairo_move_to cr 40.0 40.0)
         (cairo_show_text cr "Eufrasio Says")
         (cairo_fill cr))
       
       ;; (set! posx (+ 1.0 posx))
       ))
   (lambda (event)
     (let ((type (SDL_Event-type event)))
       (cond
        ((= type SDL_KEYDOWN)
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym (SDL_KeyboardEvent-keysym kevt))))
           (cond ((= key SDLK_ESCAPE)
                  'exit)
                 ((= key SDLK_q)
                  (set! magictopleft #t)
                  ;;(paint-rectangles (topleft #t))
                  )
                 ((= key SDLK_w)
                  (set! magictopright #t))
                 ((= key SDLK_a)
                  (set! magicbottomleft #t))
                 ((= key SDLK_s)
                  (set! magicbottomright #t))
                 (else
                  (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION (string-append "Key: " (number->string key)))))))
        ((= type SDL_KEYUP)
         (let* ((kevt (SDL_Event-key event))
                (key (SDL_Keysym-sym (SDL_KeyboardEvent-keysym kevt))))
           (cond ((= key SDLK_q)
                  (set! magictopleft #f))
                 ((= key SDLK_w)
                  (set! magictopright #f))
                 ((= key SDLK_a)
                  (set! magicbottomleft #f))
                 ((= key SDLK_s)
                  (set! magicbottomright #f)))))
        ((= type SDL_MOUSEBUTTONDOWN)
         (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION SDL_Cursor))
        ((= type SDL_FINGERDOWN)
         (SDL_LogInfo SDL_LOG_CATEGORY_APPLICATION "Finger down!"))
        ((= type SDL_WINDOWEVENT)
         'handle-window-events)
        ((= type SDL_QUIT)
         'exit))))))

